This is a place where it is helpful to list my ideas for the future development of this project.

1) Parse a URDF file to load the robot's basic structure.

Description: We can make a basic model of the Caster in URDF format using primatives as visual elements. We can create an interpreter in MATLAB which can extract key information about the robot, which includes information on joints.

Pros:
- URDF format already defined
- URDF model can be readable in the rviz package of ROS
- URDF uses XML, which can be easily parsed by MATLAB.
- Once set up, making modifications would be straightforward.
- Interpreting the URDF can be seperate from displaying it. Hence, we can design a system whichs renders a two-dimensional representation, but expand it to a three-dimensional representation later on.

Cons: 
- Additional development time for brand-new data structures.
- May be more complicated than initial application requires.

Resolution
05/27/2014
- Build an initial visualizer without the URDF interpreter, but keep this approach in mind for future development.
06/19/2014

- I have decided not to parse URDF for the visualizer, since a), URDF is designed for 3D systems, and b), simpler to load links, joints, etc. inside their own matlab functions.

2) Set up animation as a plugin:

Description: Since (as of 5/27/2014) all components modify data from a 'master' program, we can have a program which continuously modifies this data such that we can view it as an animation. Going further, we could possibly render animations in popular video formats such as avi for use in presentations.

Pros:
- Feasible with the current implementation without making extensive modifications to existing structure.
Cons:
- Additional time needed to learn video rendering.

Resolution:

06/20/2014
-Will investigate it when the initial program is complete.

3) Modify architecture of the program such that everything runs within an encapsulated struct of all handles

Pros:
- Feasible with current system.
- Easier to see all objects in the system
- Finding objects will be much faster if we search a specific set of handles for given objects.

Cons:
- May take additional time to develop.
- Every function would need to pass in a complete set of handles and interact with it in a different way.

Resolution:
- 06/23/2014
- Refactoring code so it will follow this structure. 