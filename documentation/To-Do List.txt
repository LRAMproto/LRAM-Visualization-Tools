[X] Finish coding of visual elements for the display.
06/20/2014: At this point, little more needs to be done to modify the visual elements.

1) How far do we want to differentiate the robot?

a) Currently, just the basics: frame, plates, robot base, arm, target

06/20/2014:
Now we have frame, robot plate, box, arm, target plate, and ball.

b) We might want to expand the number of elements displayed to look prettier. However, this would increase complexity.

c) Rendered elements SHOULD NOT be hard-coded as they are right now; it would be more appropriate to render everything by interpreting specialized classes to display the visual elements. The Unified Robot Description Format, given it's xml-structured format, would be an okay candidate for a basic structure to intepret; however, URDF deals with three-dimensional robots, where the current model is two-dimensional. We could interpret a two-dimensional representation that is somewhat crude at first, but refining it as time moves on, as long as during each step of the way, the inputs and outputs remain the same.
06/20/2014:
Done! There are now 3 specialized classes to handle the simulation: World objects, Link objects, and Joint objects. All of them are used in their own special ways.

[] Develop revised visualizer display function.
06/20/2014: IN PROGRESS

Notes: Must do following:

[X] Expand to fit just beyond the boundaries of the display window.
[] Render all relevant display elements of correct dimensions.

06/20/2014:
ALMOST - minor adjustments here and there.

[] More...

Notes:

1) There will need to be a special way to close the visual display, since the menu bar will be hidden. Developing a special function to find the display function and close it will be needed for this.
06/20/2014:
- The Shutdown function of viscore can handle this.

2) It would probably be better to create this program 'from scratch', rather than via GUIDE, seeing as so much changes during runtime.
06/20/2014:
- Additionally easier to use viscore_connect.

[] Develop improved control panel
06/20/2014:
- In Progress - see vis_sliders_2;

Notes:

1) When updating settings struct, we will need to append new data fields to this struct rather than replace it. This is because while some data is shared, most ancillary applications have their own little piece to contribute, for example:

-- Modifying the color of the ball: vis_control -> vis_gui
-- We should make this a standard behavior by including it as part of VisualizerCore.

06/20/2014:
NOT ANYMORE! core.settings has a very defined structure: [links, joints, misc]. Misc takes care of miscellaneous things about whatever we want to keep track of (such as peg positions or special colors).

If you want new data fields, just append it to core.settings.misc.

[] Add a function 'UpdateSettings', which will take in a cell array of settings and append it to existing settings. 

06/20/2014:
May or may not be necessary, considering how settings now works.