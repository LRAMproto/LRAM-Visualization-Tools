[] Finish coding of visual elements for the display.

1) How far do we want to differentiate the robot?

a) Currently, just the basics: frame, plates, robot base, arm, target

b) We might want to expand the number of elements displayed to look prettier. However, this would increase complexity.

c) Rendered elements SHOULD NOT be hard-coded as they are right now; it would be more appropriate to render everything by interpreting specialized classes to display the visual elements. The Unified Robot Description Format, given it's xml-structured format, would be an okay candidate for a basic structure to intepret; however, URDF deals with three-dimensional robots, where the current model is two-dimensional. We could interpret a two-dimensional representation that is somewhat crude at first, but refining it as time moves on, as long as during each step of the way, the inputs and outputs remain the same.

[] Develop revised visualizer display function.

Notes: Must do following:

[] Expand to fit just beyond the boundaries of the display window.
[] Render all relevant display elements of correct dimensions.
[] More...

Notes:

1) There will need to be a special way to close the visual display, since the menu bar will be hidden. Developing a special function to find the display function and close it will be needed for this.

2) It would probably be better to create this program 'from scratch', rather than via GUIDE, seeing as so much changes during runtime.

[] Develop improved control panel

Notes:

1) When updating settings struct, we will need to append new data fields to this struct rather than replace it. This is because while some data is shared, most ancillary applications have their own little piece to contribute, for example:

-- Modifying the color of the ball: vis_control -> vis_gui
-- We should make this a standard behavior by including it as part of VisualizerCore.
[] Add a function 'UpdateSettings', which will take in a cell array of settings and append it to existing settings. 